{"ast":null,"code":"import { useEffect, useState, useRef } from \"react\";\n\nfunction useSticky() {\n  const {\n    0: isSticky,\n    1: setSticky\n  } = useState(false);\n  const element = useRef(null);\n\n  const handleScroll = () => {\n    window.scrollY > element.current.getBoundingClientRect().bottom ? setSticky(true) : setSticky(false);\n  }; // This function handle the scroll performance issue\n\n\n  const debounce = (func, wait = 20, immediate = true) => {\n    let timeOut;\n    return () => {\n      let context = this,\n          args = arguments;\n\n      const later = () => {\n        timeOut = null;\n        if (!immediate) func.apply(context, args);\n      };\n\n      const callNow = immediate && !timeOut;\n      clearTimeout(timeOut);\n      timeOut = setTimeout(later, wait);\n      if (callNow) func.apply(context, args);\n    };\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", debounce(handleScroll));\n    return () => {\n      window.removeEventListener(\"scroll\", () => handleScroll);\n    };\n  }, [debounce, handleScroll]);\n  return {\n    isSticky,\n    element\n  };\n}\n\nexport default useSticky;","map":{"version":3,"sources":["C:/Users/Viktor/Desktop/Pazon/Bigtime-Project/hooks/useSticky.js"],"names":["useEffect","useState","useRef","useSticky","isSticky","setSticky","element","handleScroll","window","scrollY","current","getBoundingClientRect","bottom","debounce","func","wait","immediate","timeOut","context","args","arguments","later","apply","callNow","clearTimeout","setTimeout","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,QAA4C,OAA5C;;AAEA,SAASC,SAAT,GAAqB;AACnB,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAAwBJ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMK,OAAO,GAAGJ,MAAM,CAAC,IAAD,CAAtB;;AAEA,QAAMK,YAAY,GAAG,MAAM;AACzBC,IAAAA,MAAM,CAACC,OAAP,GAAiBH,OAAO,CAACI,OAAR,CAAgBC,qBAAhB,GAAwCC,MAAzD,GACIP,SAAS,CAAC,IAAD,CADb,GAEIA,SAAS,CAAC,KAAD,CAFb;AAGD,GAJD,CAJmB,CAUnB;;;AACA,QAAMQ,QAAQ,GAAG,CAACC,IAAD,EAAOC,IAAI,GAAG,EAAd,EAAkBC,SAAS,GAAG,IAA9B,KAAuC;AACtD,QAAIC,OAAJ;AACA,WAAO,MAAM;AACX,UAAIC,OAAO,GAAG,IAAd;AAAA,UACEC,IAAI,GAAGC,SADT;;AAEA,YAAMC,KAAK,GAAG,MAAM;AAClBJ,QAAAA,OAAO,GAAG,IAAV;AACA,YAAI,CAACD,SAAL,EAAgBF,IAAI,CAACQ,KAAL,CAAWJ,OAAX,EAAoBC,IAApB;AACjB,OAHD;;AAIA,YAAMI,OAAO,GAAGP,SAAS,IAAI,CAACC,OAA9B;AACAO,MAAAA,YAAY,CAACP,OAAD,CAAZ;AACAA,MAAAA,OAAO,GAAGQ,UAAU,CAACJ,KAAD,EAAQN,IAAR,CAApB;AACA,UAAIQ,OAAJ,EAAaT,IAAI,CAACQ,KAAL,CAAWJ,OAAX,EAAoBC,IAApB;AACd,KAXD;AAYD,GAdD;;AAgBAnB,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,MAAM,CAACkB,gBAAP,CAAwB,QAAxB,EAAkCb,QAAQ,CAACN,YAAD,CAA1C;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACmB,mBAAP,CAA2B,QAA3B,EAAqC,MAAMpB,YAA3C;AACD,KAFD;AAGD,GALQ,EAKN,CAACM,QAAD,EAAWN,YAAX,CALM,CAAT;AAOA,SAAO;AAAEH,IAAAA,QAAF;AAAYE,IAAAA;AAAZ,GAAP;AACD;;AAED,eAAeH,SAAf","sourcesContent":["import { useEffect, useState, useRef } from \"react\"\r\n\r\nfunction useSticky() {\r\n  const [isSticky, setSticky] = useState(false)\r\n  const element = useRef(null)\r\n\r\n  const handleScroll = () => {\r\n    window.scrollY > element.current.getBoundingClientRect().bottom\r\n      ? setSticky(true)\r\n      : setSticky(false)\r\n  }\r\n\r\n  // This function handle the scroll performance issue\r\n  const debounce = (func, wait = 20, immediate = true) => {\r\n    let timeOut\r\n    return () => {\r\n      let context = this,\r\n        args = arguments\r\n      const later = () => {\r\n        timeOut = null\r\n        if (!immediate) func.apply(context, args)\r\n      }\r\n      const callNow = immediate && !timeOut\r\n      clearTimeout(timeOut)\r\n      timeOut = setTimeout(later, wait)\r\n      if (callNow) func.apply(context, args)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", debounce(handleScroll))\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", () => handleScroll)\r\n    }\r\n  }, [debounce, handleScroll])\r\n\r\n  return { isSticky, element }\r\n}\r\n\r\nexport default useSticky"]},"metadata":{},"sourceType":"module"}