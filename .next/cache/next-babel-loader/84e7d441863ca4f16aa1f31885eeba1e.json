{"ast":null,"code":"import { useEffect, useState, useRef } from \"react\";\n\nfunction useSticky() {\n  var _arguments = arguments,\n      _this = this;\n\n  var _useState = useState(false),\n      isSticky = _useState[0],\n      setSticky = _useState[1];\n\n  var element = useRef(null);\n\n  var handleScroll = function handleScroll() {\n    window.scrollY > element.current.getBoundingClientRect().bottom ? setSticky(true) : setSticky(false);\n  }; // This function handle the scroll performance issue\n\n\n  var debounce = function debounce(func) {\n    var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;\n    var immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var timeOut;\n    return function () {\n      var context = _this,\n          args = _arguments;\n\n      var later = function later() {\n        timeOut = null;\n        if (!immediate) func.apply(context, args);\n      };\n\n      var callNow = immediate && !timeOut;\n      clearTimeout(timeOut);\n      timeOut = setTimeout(later, wait);\n      if (callNow) func.apply(context, args);\n    };\n  };\n\n  useEffect(function () {\n    window.addEventListener(\"scroll\", debounce(handleScroll));\n    return function () {\n      window.removeEventListener(\"scroll\", function () {\n        return handleScroll;\n      });\n    };\n  }, [debounce, handleScroll]);\n  return {\n    isSticky: isSticky,\n    element: element\n  };\n}\n\nexport default useSticky;","map":null,"metadata":{},"sourceType":"module"}